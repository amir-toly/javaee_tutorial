package com.sdzee.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import com.sdzee.beans.Customer;
import com.sdzee.dao.CustomerDao;
import com.sdzee.dao.base.BaseDaoImpl;
import com.sdzee.dao.base.DAOException;

public class CustomerDaoImpl extends BaseDaoImpl implements CustomerDao {

	private static final String SQL_INSERT = "INSERT INTO t_customer(last_name, first_name, address, phone_number, email, picture_name) VALUES (?, ?, ?, ?, ?, ?)";
	private static final String SQL_DELETE = "DELETE FROM t_customer WHERE id = ?";
	private static final String SQL_SELECT_BY_EMAIL = "SELECT * FROM t_customer WHERE email = ?";
	
	private DAOFactory daoFactory;
	
	CustomerDaoImpl(DAOFactory daoFactory) {
		
		this.daoFactory = daoFactory;
	}
	
	@Override
	public void create(Customer customer) throws DAOException {
		
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet autoGeneratedValues = null;
		
		try
		{
			connection = daoFactory.getConnection();
			preparedStatement = initializePreparedStatement(connection, SQL_INSERT, true,
					customer.getLastName(),
					customer.getFirstName(),
					customer.getAddress(),
					customer.getPhoneNumber(),
					customer.getEmail(),
					customer.getPictureName());
			int status = preparedStatement.executeUpdate();
			
			if (status == 0)
			{
				throw new DAOException("Error while creating customer. No row inserted.");
			}
			
			autoGeneratedValues = preparedStatement.getGeneratedKeys();
			
			if (autoGeneratedValues.next())
			{
				customer.setId(autoGeneratedValues.getLong(1));
			}
			else
			{
				throw new DAOException("Error while creating customer in database. No auto-generated identifier returned.");
			}
		}
		catch (SQLException sqle)
		{
			throw new DAOException(sqle);
		}
		finally
		{
			closeSilently(autoGeneratedValues, preparedStatement, connection);
		}
	}
	
	@Override
	public void delete(Long id) throws DAOException {
		
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		
		try
		{
			connection = daoFactory.getConnection();
			preparedStatement = initializePreparedStatement(connection, SQL_DELETE, false, id);
			int status = preparedStatement.executeUpdate();
			
			if (status != 1)
			{
				throw new DAOException("Error while deleting customer. No customer deleted.");
			}
		}
		catch (SQLException sqle)
		{
			throw new DAOException(sqle);
		}
		finally
		{
			closeSilently(preparedStatement, connection);
		}
	}

	@Override
	public Customer findByEmail(String email) throws DAOException {
		
		Customer customer = null;
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		
		try
		{
			connection = daoFactory.getConnection();
			preparedStatement = initializePreparedStatement(connection, SQL_SELECT_BY_EMAIL, false, email);
			resultSet = preparedStatement.executeQuery();
			
			if (resultSet.next())
			{
				customer = map(resultSet);
			}
		}
		catch (SQLException sqle)
		{
			throw new DAOException(sqle);
		}
		finally
		{
			closeSilently(resultSet, preparedStatement, connection);
		}
		
		return customer;
	}
	
	private Customer map(ResultSet resultSet) throws SQLException {
		
		Customer customer = new Customer();
		
		customer.setId(resultSet.getLong("id"));
		customer.setLastName(resultSet.getString("last_name"));
		customer.setFirstName(resultSet.getString("first_name"));
		customer.setAddress(resultSet.getString("address"));
		customer.setPhoneNumber(resultSet.getString("phone_number"));
		customer.setEmail(resultSet.getString("email"));
		customer.setPictureName(resultSet.getString("picture_name"));
		
		return customer;
	}
}
