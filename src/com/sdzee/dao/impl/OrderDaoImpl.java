package com.sdzee.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.joda.time.DateTime;

import com.sdzee.beans.Customer;
import com.sdzee.beans.Order;
import com.sdzee.dao.OrderDao;
import com.sdzee.dao.base.BaseDaoImpl;
import com.sdzee.dao.base.DAOException;

public class OrderDaoImpl extends BaseDaoImpl implements OrderDao {

	private static final String SQL_INSERT = "INSERT INTO t_order(customer_id, order_date, amount, payment_method, payment_status, shipping_mode, delivery_status) " +
			"VALUES (?, NOW(), ?, ?, ?, ?, ?)";
	private static final String SQL_DELETE_BY_ID = "DELETE FROM t_order WHERE id = ?";
	private static final String SQL_SELECT = "SELECT cust.id, cust.last_name, cust.first_name, cust.address, cust.phone_number, cust.email, cust.picture_name, "
			+ "ord.id, ord.order_date, ord.amount, ord.payment_method, ord.payment_status, ord.shipping_mode, ord.delivery_status "
			+ "FROM t_order ord JOIN t_customer cust ON cust.id = ord.customer_id";
	
	private DAOFactory daoFactory;
	
	OrderDaoImpl(DAOFactory daoFactory) {
		
		this.daoFactory = daoFactory;
	}
	
	@Override
	public void create(Order order) throws DAOException {
		
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet autoGeneratedValues = null;
		
		try
		{
			connection = daoFactory.getConnection();
			preparedStatement = initializePreparedStatement(connection, SQL_INSERT, true,
					order.getCustomer().getId(),
					order.getAmount(),
					order.getPaymentMethod(),
					order.getPaymentStatus(),
					order.getShippingMode(),
					order.getDeliveryStatus());
			int status = preparedStatement.executeUpdate();
			
			if (status == 0)
			{
				throw new DAOException("Error while creating order. No row inserted.");
			}
			
			autoGeneratedValues = preparedStatement.getGeneratedKeys();
			
			if (autoGeneratedValues.next())
			{
				order.setId(autoGeneratedValues.getLong(1));
			}
			else
			{
				throw new DAOException("Error while creating order in database. No auto-generated identifier returned.");
			}
		}
		catch (SQLException sqle)
		{
			throw new DAOException(sqle);
		}
		finally
		{
			closeSilently(autoGeneratedValues, preparedStatement, connection);
		}
	}
	
	@Override
	public void delete(Long id) throws DAOException {
		
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		
		try
		{
			connection = daoFactory.getConnection();
			preparedStatement = initializePreparedStatement(connection, SQL_DELETE_BY_ID, false, id);
			int status = preparedStatement.executeUpdate();
			
			if (status != 1)
			{
				throw new DAOException("Error while deleting order. No order deleted.");
			}
		}
		catch (SQLException sqle)
		{
			throw new DAOException(sqle);
		}
		finally
		{
			closeSilently(preparedStatement, connection);
		}
	}

	@Override
	public List<Order> findAll() throws DAOException {
		
		List<Order> orders = new ArrayList<Order>();
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		
		try
		{
			connection = daoFactory.getConnection();
			preparedStatement = initializePreparedStatement(connection, SQL_SELECT, false);
			resultSet = preparedStatement.executeQuery();
			
			while (resultSet.next())
			{
				orders.add(map(resultSet));
			}
		}
		catch (SQLException sqle)
		{
			throw new DAOException(sqle);
		}
		finally
		{
			closeSilently(resultSet, preparedStatement, connection);
		}
		
		return orders;
	}

	private Order map(ResultSet resultSet) throws SQLException {
		
		Order order = new Order();
		Customer customer = new Customer();
		
		customer.setId(resultSet.getLong("cust.id"));
		customer.setLastName(resultSet.getString("cust.last_name"));
		customer.setFirstName(resultSet.getString("cust.first_name"));
		customer.setAddress(resultSet.getString("cust.address"));
		customer.setPhoneNumber(resultSet.getString("cust.phone_number"));
		customer.setEmail(resultSet.getString("cust.email"));
		customer.setPictureName(resultSet.getString("cust.picture_name"));
		
		order.setCustomer(customer);
		order.setId(resultSet.getLong("ord.id"));
		order.setDate(new DateTime(resultSet.getDate("ord.order_date").getTime()));
		order.setAmount(resultSet.getDouble("ord.amount"));
		order.setPaymentMethod(resultSet.getString("ord.payment_method"));
		order.setPaymentStatus(resultSet.getString("ord.payment_status"));
		order.setShippingMode(resultSet.getString("ord.shipping_mode"));
		order.setDeliveryStatus(resultSet.getString("ord.delivery_status"));
		
		return order;
	}
}
